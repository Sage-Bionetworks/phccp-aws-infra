AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
  TagKey:
    Type: String
    Description: "Key of a tag that will be used to mark target deployment EC2 instances"
  TagValue:
    Type: String
    Description: "Value of a tag that will be used to mark target deployment EC2 instances"
  ApplicationName:
    Type: String
    Description: "Code Deploy Application Name"
  DeploymentGroupName:
    Type: String
    Description: "Code Deploy Deployment group"
  GithubCommit:
    Type: String
    Description: "Github repository commit"
  GithubRepository:
    Type: String
    Description: "Github repository"
  SSLCertificateIdArn:
    Type: String
    Description: "SSL certificate Arn"
Resources:
# IAM resources
  CodeDeployEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy'
      Path: /
  CodeDeployEC2RoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref CodeDeployEC2Role
  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
      Path: /
# EC2 related resurces
  # PHCCPSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Enable SSH, HTTP, HTTPS
  #     SecurityGroupIngress:
  #     - CidrIp: 0.0.0.0/0
  #       FromPort: 80
  #       IpProtocol: tcp
  #       ToPort: 80
  #     - CidrIp: 0.0.0.0/0
  #       FromPort: 433
  #       IpProtocol: tcp
  #       ToPort: 433
  PHCCPEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0c6b1d09930fac512
      InstanceType: t2.micro
      Monitoring: True
      DisableApiTermination: False
      IamInstanceProfile: !Ref CodeDeployEC2RoleInstanceProfile
      # SecurityGroupIds:
      #   - !Ref PHCCPSecurityGroup
      KeyName: !Ref KeyName
      Tags:
      - Key: !Ref TagKey
        Value: !Ref TagValue
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-sandcastlevpc-VpnSecurityGroup'
        SubnetId: !ImportValue 'us-east-1-sandcastlevpc-PrivateSubnet'
      UserData:
        # install CodeDeploy agent, Docker and Docker-compose
        Fn::Base64:
          #!/bin/bash -ex
          sudo yum update -y;
          sudo yum install ruby -y;
          sudo yum install wget -y;
          sudo yum install docker -y;
          sudo wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install;
          sudo chmod +x ./install;
          sudo ./install auto;
          sudo service docker start;
          sudo usermod -a -G docker ec2-user;
          sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose;
          sudo chmod +x /usr/local/bin/docker-compose;


  CodeDeployLoadBalancer:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      # template uploaded from Sage-Bionetworks/aws-infra repo
      TemplateURL: 'https://s3.amazonaws.com/bootstrap-awss3cloudformationbucket-19qromfd235z9/aws-infra/master/managed-alb-https.yaml'
      Parameters:
        Department: !Ref Department
        Project: !Ref Project
        OwnerEmail: !Ref OwnerEmail
        #sandcastle vpc
        VpcId: vpc-0e9b80dc470a797d5
        #public subnets
        Subnets: "subnet-02f2acd15e5be53cd,subnet-031359c53fce9b312,subnet-0f19d4c62f9ab0f2c"
        Ec2InstanceId: !Ref PHCCPEC2Instance
        SSLCertificateIdArn: !Ref SSLCertificateIdArn
        AppPort: "80"

# CodeDeploy resources
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref ApplicationName
      ComputePlatform: Server

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Ref DeploymentGroupName
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
      Ec2TagFilters:
        - Key: !Ref TagKey
          Value: !Ref TagValue
          Type: "KEY_AND_VALUE"
      # Deployment:
      #   Description: "Phccp github deploy"
      #   IgnoreApplicationStopFailures: true
      #   Revision:
      #     RevisionType: GitHub
      #     GitHubLocation:
      #       Repository: !Ref GithubRepository
      #       CommitId: !Ref GithubCommit
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      LoadBalancerInfo:
        ElbInfoList:
          - Name: !GetAtt CodeDeployLoadBalancer.Outputs.LoadBalancerName

      # Tags:
      #   - Key: "Name"
      #     Value: !Ref 'AWS::StackName'
      #   - Key: "Department"
      #     Value: !Ref Department
      #   - Key: "Project"
      #     Value: !Ref Project
      #   - Key: "OwnerEmail"
      #     Value: !Ref OwnerEmail

# # Secrets
  #   DockerRegistrySecret:
  #   Type: 'AWS::SecretsManager::Secret'
  #   Properties:
  #     SecretString: '{"username":"DockerUsername","password":"Docker-Password"}'
  # DockerSecretResourcePolicy:
  #   Type: AWS::SecretsManager::ResourcePolicy
  #   Properties:
  #     SecretId: !Ref DockerRegistrySecret
  #     ResourcePolicy:
  #       Version: "2012-10-17"
  #       Statement:
  #         -
  #           Effect: "Allow"
  #           Principal:
  #             AWS:
  #               - !Ref PhccpServiceUser
  #           Action: "secretsmanager:GetSecretValue"
  #           Resource: "*"
  PhccpServiceUser:
    Type: 'AWS::IAM::User'
    Properties:
      Policies:
      - PolicyName: "create-codedeploy-deployment"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - codedeploy:CreateDeployment
            Resource:
            - "*"
            # - !Join
            #   - ''
            #   - - "arn:aws:codedeploy:us-east-1:055273631518:deploymentgroup:"
            #     - !Ref ApplicationName
            #     - "/"
            #     - !Ref DeploymentGroupName
          - Effect: Allow
            Action:
            - codedeploy:GetDeploymentConfig
            Resource:
            - "*"
            # - "arn:aws:codedeploy:us-east-1:055273631518:deploymentconfig:CodeDeployDefault.AllAtOnce"
          - Effect: Allow
            Action:
            - codedeploy:GetApplicationRevision
            Resource:
            - "*"
            # - !Join
            #   - ''
            #   - - "arn:aws:codedeploy:us-east-1:055273631518:application:"
            #     - !Ref ApplicationName

  PhccpServiceUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref PhccpServiceUser
Outputs:
  DeploymentApplication:
    Value: !Ref CodeDeployApplication
    Description: Name of CodeDeploy application to be used for deployments
  DeploymentGroup:
    Value: !Ref DeploymentGroup
    Description: Name of DeploymentGroup application to be used for deployments