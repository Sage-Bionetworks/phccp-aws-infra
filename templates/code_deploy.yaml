AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
  TagKey:
    Type: String
    Description: "Key of a tag that will be used to mark target deployment EC2 instances"
  TagValue:
    Type: String
    Description: "Value of a tag that will be used to mark target deployment EC2 instances"
  SSLCertificateIdArn:
    Type: String
    Description: "SSL certificate Arn"
  CodeDeployEC2RoleInstanceProfile:
    Type: String
    Description: "Code Deploy EC2 Role"
  SslPolicy:
    Type: String
    Default: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
    AllowedValues:
      - "ELBSecurityPolicy-TLS-1-2-2017-01"
      - "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
      - "ELBSecurityPolicy-FS-2018-06"
  AppPort:
    Description: The port that the application runs on
    Type: Number
    MinValue: 1
    MaxValue: 65535
    Default: 443
    ConstraintDescription: A port number in the range 1 to 65535
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: The VPC Id for the ELB
  Subnets:
    Description: List of subnets for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  Scheme:
    Description: Load balancer interface scheme
    Type: String
    AllowedValues:
      - "internet-facing"
      - "internal"
    Default: internet-facing
Resources:
# IAM resources

  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
      Path: /

# # EC2 related resurces
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Open a port for incoming traffic"
      VpcId: !ImportValue 'us-east-1-sandcastlevpc-VPCId'
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"


  PHCCPEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0c6b1d09930fac512
      InstanceType: t2.micro
      Monitoring: True
      DisableApiTermination: False
      IamInstanceProfile: !Ref CodeDeployEC2RoleInstanceProfile
      KeyName: !Ref KeyName
      Tags:
      - Key: !Ref TagKey
        Value: !Ref TagValue
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-sandcastlevpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-sandcastlevpc-PrivateSubnet'
      UserData:
        # install CodeDeploy agent, Docker and Docker-compose
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              sudo yum update -y;
              sudo yum install ruby -y;
              sudo yum install wget -y;
              sudo yum install docker -y;
              sudo wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install;
              sudo chmod +x ./install;
              sudo ./install auto;
              sudo service docker start;
              sudo usermod -a -G docker ec2-user;
              sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose;
              sudo chmod +x /usr/local/bin/docker-compose;

  #Load balancer
  Ec2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Ec2SecurityGroup
      GroupDescription: EC2 Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !GetAtt ElbSecurityGroup.GroupId
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  ElbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ElbSecurityGroup
      GroupDescription: ELB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Targets:
        - Id: !Ref PHCCPEC2Instance
          Port: !Ref AppPort
      VpcId: !Ref VpcId
      Port: !Ref AppPort
      Protocol: HTTP
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref PHCCPEC2Instance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: "application"
      IpAddressType: "ipv4"
      Scheme: !Ref Scheme
      SecurityGroups:
        - !GetAtt ElbSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref PHCCPEC2Instance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  ElbHttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref AppPort
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref ElbTargetGroup
          Type: forward
  ElbHttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref SSLCertificateIdArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref SslPolicy
      DefaultActions:
        - TargetGroupArn: !Ref ElbTargetGroup
          Type: forward

# CodeDeploy resources
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      Ec2TagFilters:
        - Key: !Ref TagKey
          Value: !Ref TagValue
          Type: "KEY_AND_VALUE"
      # Deployment:
      #   Description: "Phccp github deploy"
      #   IgnoreApplicationStopFailures: true
      #   Revision:
      #     RevisionType: S3
      #     S3Location:
      #       Bucket: !Ref CodeDeployS3Bucket
      #       Key:
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt ElbTargetGroup.TargetGroupName


# # Secrets
  #   DockerRegistrySecret:
  #   Type: 'AWS::SecretsManager::Secret'
  #   Properties:
  #     SecretString: '{"username":"DockerUsername","password":"Docker-Password"}'
  # DockerSecretResourcePolicy:
  #   Type: AWS::SecretsManager::ResourcePolicy
  #   Properties:
  #     SecretId: !Ref DockerRegistrySecret
  #     ResourcePolicy:
  #       Version: "2012-10-17"
  #       Statement:
  #         -
  #           Effect: "Allow"
  #           Principal:
  #             AWS:
  #               - !Ref PhccpServiceUser
  #           Action: "secretsmanager:GetSecretValue"
  #           Resource: "*"
  PhccpServiceUser:
    Type: 'AWS::IAM::User'
    Properties:
      Policies:
      - PolicyName: "create-codedeploy-deployment"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - codedeploy:CreateDeployment
            Resource:
            - "*"
            # - !Join
            #   - ''
            #   - - "arn:aws:codedeploy:us-east-1:055273631518:deploymentgroup:"
            #     - !Ref ApplicationName
            #     - "/"
            #     - !Ref DeploymentGroupName
          - Effect: Allow
            Action:
            - codedeploy:GetDeploymentConfig
            Resource:
            - "*"
            # - "arn:aws:codedeploy:us-east-1:055273631518:deploymentconfig:CodeDeployDefault.AllAtOnce"
          - Effect: Allow
            Action:
            - codedeploy:GetApplicationRevision
            Resource:
            - "*"
            # - !Join
            #   - ''
            #   - - "arn:aws:codedeploy:us-east-1:055273631518:application:"
            #     - !Ref ApplicationName
  PhccpServiceUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref PhccpServiceUser
Outputs:
  CodeDeployApplication:
    Value: !Ref CodeDeployApplication
    Description: Name of CodeDeploy application to be used for deployments
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CodeDeployApplication'
  DeploymentGroup:
    Value: !Ref DeploymentGroup
    Description: Name of DeploymentGroup application to be used for deployments
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-DeploymentGroup'
  PhccpServiceUserSecretAccessKey:
    Value: !GetAtt PhccpServiceUserAccessKey.SecretAccessKey
    Description: Secret access key of phccp service user
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PhccpServiceUserSecretAccessKey'
  PhccpServiceUserAccessKeyId:
    Value: !Ref PhccpServiceUserAccessKey
    Description: Access key id of phccp service user
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PhccpServiceUserAccessKeyId'
  LoadBalancerName:
    Value: !GetAtt LoadBalancer.LoadBalancerName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LoadBalancerName'
  LoadBalancerArn:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LoadBalancerArn'
  LoadBalancerDnsName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LoadBalancerDnsName'
  ElbTargetGroupFullName:
    Value: !GetAtt ElbTargetGroup.TargetGroupFullName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ElbTargetGroupFullName'
  ElbTargetGroupName:
    Value: !GetAtt ElbTargetGroup.TargetGroupName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ElbTargetGroupName'
  ElbTargetGroupArn:
    Value: !Ref ElbTargetGroup
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ElbTargetGroupArn'