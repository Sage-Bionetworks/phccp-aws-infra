AWSTemplateFormatVersion: 2010-09-09
# Conditions:
#   IsSandbox: !Equals [!Ref "AWS::AccountId", "563295687221"]
Mappings:
  AdminRoleArns:
    "563295687221":
      Arn: "arn:aws:iam::563295687221:role/accounts-AWSIAMAdminRole-1B5HUQPC19H69"
    "055273631518":
      Arn: "arn:aws:iam::055273631518:role/accounts-AWSIAMAdminRole-JL0BF315YDU0"
Resources:
  AWSKmsInfraKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Join
        - '-'
        - - !Ref AWS::StackName
          - "InfraKey"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - !ImportValue us-east-1-bootstrap-CfServiceRoleArn
                - !FindInMap [AdminRoleArns, !Ref "AWS::AccountId", Arn]
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !ImportValue us-east-1-bootstrap-CfServiceRoleArn
                - !FindInMap [AdminRoleArns, !Ref "AWS::AccountId", Arn]
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
  AWSKmsPHCCPInfraKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - 'alias/'
          - !Ref AWS::StackName
          - '/InfraKey'
      TargetKeyId: !Ref AWSKmsInfraKey
  
  CodeDeployEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy'
      Path: /

  PhccpS3User:
    Type: 'AWS::IAM::User'

  CodeDeployS3Bucket:
    Type: AWS::S3::Bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: AllowCodeDeployFromEC2Role
            Effect: Allow
            Principal:
              AWS:
                - Fn::GetAtt: [ CodeDeployEC2Role, Arn ]
            Action:
              - s3:Get*
              - s3:List*
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref CodeDeployS3Bucket
                - /*
          - Sid: AllowPutFromDeployUser
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt PhccpS3User.Arn
            Action:
              - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref CodeDeployS3Bucket
                - /*
      Bucket: !Ref CodeDeployS3Bucket

  CodeDeployEC2RoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref CodeDeployEC2Role
Outputs:
  CodeDeployS3Bucket:
    Value: !Ref CodeDeployS3Bucket
    Description: Name of S3 bucket to be used for deployments
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CodeDeployS3Bucket'
  CodeDeployEC2RoleInstanceProfile:
    Value: !Ref CodeDeployEC2RoleInstanceProfile
    Description: Code deploy ec2 role instance profile

